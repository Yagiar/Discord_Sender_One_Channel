import requests
import time
from datetime import datetime
from colorama import Fore, Style
from concurrent.futures import ThreadPoolExecutor

from manager_gpt import GptClient

# ID –∫–∞–Ω–∞–ª–∞ –∏–ª–∏ –≤–µ—Ç–∫–∏
#CHANNEL_OR_THREAD_ID = "1319450142914646069"

CHANNEL_OR_THREAD_ID = "1320853576221851686" 

# URL –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
URL = f"https://discord.com/api/v9/channels/{CHANNEL_OR_THREAD_ID}/messages"

# –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å —Ç–æ–∫–µ–Ω–∞–º–∏
TOKENS_FILE = "tokens.txt"

# –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
MESSAGES_FILE = "messages.txt"

# –ü—Ä–æ–∫—Å–∏-—Å–µ—Ä–≤–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ login:password:ip:port (–µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è)
PROXY = "user161722:e61ra0@146.247.105.132:7547"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–∫—Å–∏ –¥–ª—è requests
proxies = {
    "http": f"http://{PROXY}",
    "https": f"http://{PROXY}",
}

# –ò–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)
MESSAGE_INTERVAL = 35


def load_tokens(file_path):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ç–æ–∫–µ–Ω—ã –∏–∑ —Ñ–∞–π–ª–∞."""
    try:
        with open(file_path, "r", encoding="utf-8") as file:
            tokens = [line.strip() for line in file if line.strip()]
        if not tokens:
            raise ValueError("–§–∞–π–ª —Å —Ç–æ–∫–µ–Ω–∞–º–∏ –ø—É—Å—Ç!")
        return tokens
    except FileNotFoundError:
        print(f"{Fore.RED}[–û–®–ò–ë–ö–ê]{Style.RESET_ALL} –§–∞–π–ª {file_path} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        exit(1)
    except ValueError as e:
        print(f"{Fore.RED}[–û–®–ò–ë–ö–ê]{Style.RESET_ALL} {e}")
        exit(1)


def load_messages(file_path):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞."""
    try:
        with open(file_path, "r", encoding="utf-8") as file:
            messages = [line.strip() for line in file if line.strip()]
        if not messages:
            raise ValueError("–§–∞–π–ª —Å —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –ø—É—Å—Ç!")
        return messages
    except FileNotFoundError:
        print(f"{Fore.RED}[–û–®–ò–ë–ö–ê]{Style.RESET_ALL} –§–∞–π–ª {file_path} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        exit(1)
    except ValueError as e:
        print(f"{Fore.RED}[–û–®–ò–ë–ö–ê]{Style.RESET_ALL} {e}")
        exit(1)


def send_message(content, token):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º."""
    headers = {
        "Authorization": token,
        "Content-Type": "application/json"
    }
    message = {"content": content}
    try:
        response = requests.post(URL, headers=headers, json=message, proxies=proxies)
        current_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        if response.status_code == 200:
            print(f"{Fore.GREEN}[–£–°–ü–ï–•_–î–ê–û]{Style.RESET_ALL} –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: '{content}' –≤ {current_time}")
        else:
            print(f"{Fore.RED}[–û–®–ò–ë–ö–ê_–î–ê–û]{Style.RESET_ALL} –ö–æ–¥ –æ—à–∏–±–∫–∏: {response.status_code}. –û—Ç–≤–µ—Ç: {response.text}")
    except requests.exceptions.ProxyError as e:
        print(f"{Fore.RED}[–û–®–ò–ë–ö–ê_–ü–†–û–ö–°–ò]{Style.RESET_ALL} –ü—Ä–æ–±–ª–µ–º–∞ —Å –ø—Ä–æ–∫—Å–∏-—Å–µ—Ä–≤–µ—Ä–æ–º: {e}")
    except requests.exceptions.RequestException as e:
        print(f"{Fore.RED}[–û–®–ò–ë–ö–ê_–°–ï–¢–ò]{Style.RESET_ALL} –ü—Ä–æ–±–ª–µ–º–∞ —Å –∑–∞–ø—Ä–æ—Å–æ–º: {e}")


def process_account(token, messages):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ–¥–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞."""
    for i, message in enumerate(messages):
        print(f"{Fore.CYAN}[–ò–ù–§–û]{Style.RESET_ALL} –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è '{message}' —Å –∞–∫–∫–∞—É–Ω—Ç–∞ {token[:10]}...")
        send_message(message, token)
        if i < len(messages) - 1:  # –¢–∞–π–º–µ—Ä –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
            time.sleep(MESSAGE_INTERVAL)

def process_account_gpt(token, message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ–¥–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞."""
    print(f"{Fore.CYAN}[–ò–ù–§–û]{Style.RESET_ALL} –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è '{message}' —Å –∞–∫–∫–∞—É–Ω—Ç–∞ {token[:10]}...")
    send_message(message, token)
    time.sleep(MESSAGE_INTERVAL)

import questionary

def main():
    """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Ä–∞–±–æ—Ç—ã."""
    tokens = load_tokens(TOKENS_FILE)
    choice = questionary.select(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π",
        choices=[
            "1. –ò–∑ —Ñ–∞–π–ª–∞",
            "2. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å –ø–æ–º–æ—â—å—é ChatGPT",
            "0. –í—ã—Ö–æ–¥",
        ],
        instruction="(–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—Ç—Ä–µ–ª–∫–∏ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è)",
        pointer="ü•é",
    ).ask()
    match choice.split(".")[0]:

        case "0":
            print("–í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã...")
            return  # –ó–∞–≤–µ—Ä—à–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã
        
        case "1":
            messages = load_messages(MESSAGES_FILE)
            print(f"–ù–∞–π–¥–µ–Ω–æ {len(tokens)} –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –∏ {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ —Ñ–∞–π–ª–∞.")

            with ThreadPoolExecutor(max_workers=2) as executor:
                futures = [
                    executor.submit(process_account, token, messages)
                    for token in tokens
                ]
                # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ—Ç–æ–∫–æ–≤
                for future in futures:
                    future.result()
        case "2":
            client = GptClient(role="assistant")
            #print("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π: ")
            cur_count = 0
            count = int(input("–í–≤–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π: "))
            for token in tokens:
                for i in range(count):
                    print(cur_count, count)
                    message = client.get_message() # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                    process_account_gpt(token, message)
                    cur_count += 1
                    time.sleep(15)
        # –°–æ–∑–¥–∞–µ–º –ø—É–ª –ø–æ—Ç–æ–∫–æ–≤ –¥–ª—è –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
        case _:
            print("–í—ã–±—Ä–∞–Ω –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç")


    print("\n–í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã. –°–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à–µ–Ω.")
    return

# –ó–∞–ø—É—Å–∫
if __name__ == "__main__":
    main()
